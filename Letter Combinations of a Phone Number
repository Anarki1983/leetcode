func letterCombinations(digits string) []string {
    if len(digits) == 0 {
        return nil
    }
    
    m := map[string][]string {
        "2": []string{"a", "b", "c"},
        "3": []string{"d", "e", "f"},
        "4": []string{"g", "h", "i"},
        "5": []string{"j", "k", "l"},
        "6": []string{"m", "n", "o"},
        "7": []string{"p", "q", "r", "s"},
        "8": []string{"t", "u", "v"},
        "9": []string{"w", "x", "y", "z"},		
    }
    d := strings.Split(digits, "")

    return combination(m[d[0]], d[1:], m)
}

func combination(s, d []string, m map[string][]string) []string{
    if len(d) == 0 {
        return s
    }

    ret := make([]string, len(s) * len(m[d[0]]))

    i:=0
    for _, c := range m[d[0]] {
        for _, str := range s {
                ret[i] = str + c
                i++
        }
    }

    return combination(ret, d[1:], m)
}
