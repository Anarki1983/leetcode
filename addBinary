func addBinary(a string, b string) string {
    // reverse a, reverse b
    aSlice := strings.Split(reverse(a), "")
    bSlice := strings.Split(reverse(b), "")
    
    l := len(a)
    if len(b) > len(a) {
        l = len(b)
    }
    
    resStr := ""
    carry := "0"
    for i:=0; i<l; i++ {
        x := "0"
        y := "0"
        if i < len(aSlice) {
            x = aSlice[i]
        }
        if i < len(bSlice) {
            y = bSlice[i]
        }
        
        res := sumStr(x, y, carry)
        switch res {
            case "0", "1":
                carry = "0"
            case "2":
                res = "0"
                carry = "1"
            case "3":
                res = "1"
                carry = "1"
        }
        
        resStr += res
    }
    
    if carry == "1" {
        resStr += "1"
    }
    
    return reverse(resStr)
    
    // bit[i] = a[i]+b[i]
    //   1 1 0
    //     1 1
    // 1 0 0 1
    
    // if bit[i] == 0 or 1, carry = 0
    // if bit[i] == 2, bit = 0, carry = 1
    
    // 注意slice長度 & carry 最終是否已處理
    
    // return reverse bit
    
    // hack, do not reverse
}

func reverse(s string) string {
    runes := []rune(s)
    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
        runes[i], runes[j] = runes[j], runes[i]
    }
    return string(runes)
}

func sumStr(a string, b string, carry string) string {
    if a == "0" && b == "0" {
        return carry
    }
    
    if a == "1" && b == "1" {
        if carry == "1" {
            return "3"
        }
        return "2"
    }
  
    if carry == "1" {
        return "2"
    }
    
    return "1"
}
