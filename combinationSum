//Runtime: 10 ms, faster than 31.49% of Go online submissions for Combination Sum.
//Memory Usage: 3.9 MB, less than 36.74% of Go online submissions for Combination Sum.

var ret [][]int

func combinationSum(candidates []int, target int) [][]int {
    ret = make([][]int, 0, 0)
    
    combination := make([]int, 0, 0)
    dfs(candidates, target, combination)
    
    return ret
}

func dfs(candidates []int, target int, combination []int) {
    sum := 0
    maxNum := -1
    for _, num := range combination {
        sum += num
        if num > maxNum {
            maxNum = num
        }
    }
    
    for _, num := range candidates {
        if num < maxNum {
            continue
        }
        
        if sum + num == target {
            copyCombination := copySlice(combination)
            copyCombination = append(copyCombination, num)
            
            ret = append(ret, copyCombination)
        }
        if sum + num < target {
            copyCombination := copySlice(combination)
            copyCombination = append(copyCombination, num)
            
            dfs(candidates, target, copyCombination)
        }
    }
}

func copySlice(src []int) []int {
    dst := make([]int, len(src))
    
    copy(dst, src)
    
    return dst
}
