//Runtime: 4 ms, faster than 70.21% of Go online submissions for Remove Duplicates from Sorted List.
//Memory Usage: 3.1 MB, less than 41.03% of Go online submissions for Remove Duplicates from Sorted List.

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteDuplicates(head *ListNode) *ListNode {
    // compare next node with curr value
    // remove next node if equal
    
    if head == nil {
        return nil
    }
    
    curr := head
    for curr != nil {
        // remove duplicate
        if curr.Next != nil && curr.Val == curr.Next.Val {
            curr.Next = curr.Next.Next
            continue
        } 
           
        curr = curr.Next
    }
    
    return head
}

func deleteDuplicates2(head *ListNode) *ListNode {
    curr := head
    for curr != nil {
        // move next untail curr != next
        tmp := curr.Next
        for tmp != nil {
            if curr.Val != tmp.Val {
                break
            } 
            
            tmp = tmp.Next
        }
        
        curr.Next = tmp
        curr = curr.Next
    }
    
    return head
}
