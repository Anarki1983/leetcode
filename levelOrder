//Runtime: 2 ms, faster than 67.35% of Go online submissions for Binary Tree Level Order Traversal.
//Memory Usage: 3.2 MB, less than 5.72% of Go online submissions for Binary Tree Level Order Traversal.

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
var m map[int][]int

func levelOrder(root *TreeNode) [][]int {
    m = make(map[int][]int)
    inorder(root, 0)
    
    ret := make([][]int, len(m), len(m))
    for i:=0; i<len(m); i++ {
        ret[i] = m[i]
    }
    
    return ret
}

func inorder(node *TreeNode, n int) {
    if node == nil {
        return
    }
    
    if node.Left != nil {
        inorder(node.Left, n+1)
    }
    
    if m[n] == nil {
        m[n] = make([]int, 0, 2)
    }
    
    m[n] = append(m[n], node.Val)
    
    if node.Right != nil {
        inorder(node.Right, n+1)
    }
}
