var ret [][]int

func permute(nums []int) [][]int {
    ret = make([][]int, 0, 0)
    visited := make([]bool, len(nums), len(nums))
    permutation := make([]int, 0, len(nums))
    
    dfs(nums, visited, permutation)
    
    return ret
}

func dfs(nums []int, visited []bool, permutation []int) {
    for i, num := range nums {
        if !visited[i] {
            visited[i] = true
            
            copyPermutation := copySlice(permutation)
            copyPermutation = append(copyPermutation, num)
            
             // if all visited, append to ret
            isAllVisited := true
            for _, ok := range visited {
                if !ok {
                    isAllVisited = false
                    break
                }
            }

            if isAllVisited {
                ret = append(ret, copyPermutation)
            } else {
                dfs(nums, visited, copyPermutation)    
            }
            
            visited[i] = false
        }
    }
}

func copySlice(src []int) []int {
    dst := make([]int, len(src))
    
    copy(dst, src)
    
    return dst
}
